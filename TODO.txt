* Implement Guage as Unsigned32
* Remove support for setting of counters - make it a parse error

* Update my test files with recent changes
* Add to README.md with
-> series of examples: language constructs, various oids
-> update grammar

* Add basic type of: oid
* Need oid for pc-print-monitor for its enterprise id
* Allow oid's to be added together but that's all (like strings)
DONE

* Add an argv type mechanism
* instead of: num-pages: integer
* have:       num-pages> integer
* this will either take from -Vkey=value option line
* or if not specified then will prompt the user to input the value
DONE

* Add func strBitset() to get string version of bitset
DONE
* Add func strOid() to get string version of oid
DONE

* Add basic types: integer clones of: counter32, counter64
=> want processing done same way but want type info to be different

* Add basic types: ipaddress
DONE

* Types supported by ProcmonLogicalis
//      int            GOT
//      string         GOT
//      asn1.Oid       GOT
//      snmp.Counter32 GOT 32bit uint
//      snmp.Counter64
//      snmp.IpAddress GOT 32bit ipv4 address
//      snmp.TimeTicks GOT 32bit uint
//      snmp.Unsigned32 GOT equivalent to Guage32
//      snmp.Opaque
//      asn1.Null
Boolean is not an snmp type

* https://www.eventtracker.com/support/online-help/trap-tracker/SNMPv1_Datatypes.htm
Integer, Octet String, Counter, Object Identifier, Null (not used), Sequence, Sequence of, IpAddress, NetworkAddress,
Guage = uint32, TimeTicks, Opaque

* https://www.eventtracker.com/support/online-help/trap-tracker/SNMPv2_Datatypes.htm
Integer32 (= Integer), Counter32 (= Counter), Guage32 (= Guage), Unsigned 32 (= Guage32), Counter 64, Bits

* Toshiba netsnmp dump:
$ awk <toshiba.dump '{print $3}' | sort -u | egrep '^[a-zA-Z]'
Counter32: GOT
Gauge32:   GOT
INTEGER:   GOT
IpAddress: GOT
OID:       GOT
STRING:    GOT
Timeticks: GOT
Hex-STRING: <-- This is a display thing and not a base type

xerox.dump and a router.dump have the same list of data types

So ones to add next are:
oid, counter, ipaddress, timeticks
asn1.Oid, snmp.Counter32, snmp.IpAddress, snmp.TimeTicks, Guage
DONE

1.
oid - can be done like we already have
oid expression can just have addition operator like a string.
DONE

2.
counter32 and timeticks - treated like int - use same int expression code just note the type for conversions
DONE and DONE

3.
ipv4address - it is 4 byte data - but not sure for literal assignment as it is just like an OID
I guess the parser can expect an OID for lex item but if not compatible (4 compenents of 0..255) then give a parse error. 
ipv4address expression is just the literal version - no operations. 
DONE

4.
Guage32 - is equivalent to unsigned int 32
DONE

5.
Waiting on a rw oid variable
Every time one sets the snmp oid we are going to send in channel
----
var
fred: 1.3.1.2 rw integer
endvar
run
  read fred
  print strInt(fred)
endrun
----
DONE

5b.
Make the waiting on rw oid variable be for "rwb" and make "rw"
be non-blocking and have locked access.
DONE

6.
Add support for binary strings using literal notation.
{ size|value sep size|value sep ... }
sep = , / : -
e.g.
{ 2 | 2018, 1 | 9, 1 | 3 }
{ 2018-9-3 }
{ 2018/9/3 }
Autosizing unless size specifier.

6b.
Another alternative
time: 1.3.1 bytes {year:2, month:1, day:1, hours:1, mins:1, secs:1, deci:1, utc-dir:1, utc-hours:1, utc-mins:1}
time.year = 2019
time.month = 2
time.day = 3
time.hours = 13
time.secs = 2
time.deci = 0
time.utc-dir = 43
time.utc-hours = 10
time.utc-mins = 0

format:
id: oid bytes fields

fields = {id:size, id2:size2, ...}

7.
Allow scope of aliases only to be around their variables
At the moment they are global which can lead to name clashes
and is widening scope unnecessarily.

x = 'down'
->
x has set of aliases to eval expression by

if x contains 'down'
  print "x contains down"
endif
->
Need to work out the set of aliases by accumulating all the variable's aliases in the expression
=> 2nd pass of whole expression

OR

if x contains x.'down'
  print "x contains down"
endif

And have aliases prefixed by variable in expressions.
It is more verbose and rather obvious.

