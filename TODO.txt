* Update my test files with recent changes
* Add to README.md with
-> series of examples: language constructs, various oids
-> update grammar

* Add basic type of: oid
* Need oid for pc-print-monitor for its enterprise id
* Allow oid's to be added together but that's all (like strings)
DONE

* Add an argv type mechanism
* instead of: num-pages: integer
* have:       num-pages> integer
* this will either take from -Vkey=value option line
* or if not specified then will prompt the user to input the value
DONE

* Add func strBitset() to get string version of bitset
DONE
* Add func strOid() to get string version of oid
DONE

* Add basic types: integer clones of: counter32, counter64
=> want processing done same way but want type info to be different

* Add basic types: ipaddress
DONE

* Types supported by ProcmonLogicalis
//      int            GOT
//      string         GOT
//      asn1.Oid       GOT
//      snmp.Counter32 GOT 32bit uint
//      snmp.Counter64
//      snmp.IpAddress GOT 32bit ipv4 address
//      snmp.TimeTicks GOT 32bit uint
//      snmp.Unsigned32
//      snmp.Opaque
//      asn1.Null
Missing Guage32
Boolean is not an snmp type

* https://www.eventtracker.com/support/online-help/trap-tracker/SNMPv1_Datatypes.htm
Integer, Octet String, Counter, Object Identifier, Null (not used), Sequence, Sequence of, IpAddress, NetworkAddress,
Guage, TimeTicks, Opaque

* https://www.eventtracker.com/support/online-help/trap-tracker/SNMPv2_Datatypes.htm
Integer32 (= Integer), Counter32 (= Counter), Guage32 (= Guage), Unsigned 32, Counter 64, Bits

* Toshiba netsnmp dump:
$ awk <toshiba.dump '{print $3}' | sort -u | egrep '^[a-zA-Z]'
Counter32: GOT
Gauge32:   WANT but not supported yet
INTEGER:   GOT
IpAddress: GOT
OID:       GOT
STRING:    GOT
Timeticks: GOT
Hex-STRING: <-- I think this is a display thing and not a base type

xerox.dump and a router.dump have the same list of data types

So ones to add next are:
oid, counter, ipaddress, timeticks
asn1.Oid, snmp.Counter32, snmp.IpAddress, snmp.TimeTicks
DONE

1.
oid - can be done like we already have
oid expression can just have addition operator like a string.
DONE

2.
counter32 and timeticks - treated like int - use same int expression code just note the type for conversions
DONE and DONE

3.
ipv4address - it is 4 byte data - but not sure for literal assignment as it is just like an OID
I guess the parser can expect an OID for lex item but if not compatible (4 compenents of 0..255) then give a parse error. 
ipv4address expression is just the literal version - no operations. 
DONE

4.
Guage32 - have to extend ProcmonLogicalis code 
